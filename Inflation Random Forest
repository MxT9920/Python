import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from sklearn.preprocessing import StandardScaler
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv('C:\\Users\\manan\\Desktop\\DAPM.csv')

# Replace 'Inflation' with a binary classification based on its median value
median_inflation = df['Inflation'].median()
df['Inflation_Class'] = df['Inflation'].apply(lambda x: 1 if x >= median_inflation else 0)

# Select features and target variable for the classification
X = df.drop(['Year', 'Inflation', 'Inflation_Class'], axis=1)
y = df['Inflation_Class']

# Handle missing values with an imputer
imputer = SimpleImputer(strategy='mean')
X_imputed = imputer.fit_transform(X)

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_imputed)

# Split the dataset into a training set and a test set
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# Initialize the Random Forest Classifier
rf_classifier = RandomForestClassifier(random_state=42)

# Fit the classifier on the training data
rf_classifier.fit(X_train, y_train)

# Predict on the test set
predictions = rf_classifier.predict(X_test)

# Calculate the accuracy and generate a classification report
accuracy = accuracy_score(y_test, predictions)
report = classification_report(y_test, predictions)

# Confusion matrix visualization
cm = confusion_matrix(y_test, predictions)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Low', 'High'], yticklabels=['Low', 'High'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Random Forest Confusion Matrix')
plt.show()

# Output the accuracy and the report
print(report)
print(f'Accuracy: {accuracy:.2f}')
