import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.pipeline import make_pipeline

# Load data
file_path = 'C:\\Users\\manan\\Desktop\\DAPM.csv'  # File path 
data = pd.read_csv(file_path)
# Preprocessing
data['Month'] = pd.to_datetime(data['Month'], errors='coerce')
data.fillna(data.mean(), inplace=True)
# Selecting variable
X = data.drop(['Gold', 'Month'], axis=1)  
y = data['Gold']
# Splitting 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Create a pipeline that includes polynomial feature creation, scaling, and ridge regression
ridge_model = make_pipeline(PolynomialFeatures(degree=2), StandardScaler(), Ridge(alpha=1.0))
# Model Training
ridge_model.fit(X_train, y_train)
# Predictions
y_pred = ridge_model.predict(X_test)
# Model Evaluation
ridge_rmse = np.sqrt(mean_squared_error(y_test, y_pred))
ridge_r2 = r2_score(y_test, y_pred)
print("Ridge Regression RMSE:", ridge_rmse)
print("Ridge Regression R-squared:", ridge_r2)
# Scatter plot of Actual vs Predicted
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.7, color='dodgerblue', edgecolors='w', s=100)
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=3)
plt.xlabel('Actual Gold Prices')
plt.ylabel('Predicted Gold Prices')
plt.title('Ridge Regression: Actual vs. Predicted Gold Prices')
plt.grid(True)
plt.show()
# Residual Plot with Histogram
residuals = y_test - y_pred
plt.figure(figsize=(10, 6))
plt.scatter(y_pred, residuals, alpha=0.7, color='tomato', edgecolors='w', s=100)
plt.axhline(y=0, color='black', linestyle='--', lw=2)
plt.xlabel('Predicted Gold Prices')
plt.ylabel('Residuals')
plt.title('Ridge Regression: Residuals of Predictions')
plt.grid(True)
# Adding histogram to the residual plot
hist_bins = int(np.sqrt(len(residuals))) # Using the square root rule for number of bins
plt.hist(residuals, bins=hist_bins, alpha=0.5, color='gray', edgecolor='black')
plt.show()
